/*
 * inputMgr.cpp
 *
 *  Created on: Mar 17, 2017
 *      Author: jwoo
 */


#include <inputMgr.h>
#include <engine.h>
using namespace std;


InputMgr::InputMgr() : Mgr(engine), dirVec(Ogre::Vector3::ZERO)
{

}

InputMgr::InputMgr(Engine* engine) : Mgr(engine){
	dt = 25.0f;
	move = 400.0f;
	dirVec = Ogre::Vector3::ZERO;
}

void InputMgr::tick(float dt){

	if (engine->gfxMgr->mWindow->isClosed()) engine->stop();

	mKeyboard->capture();
	mMouse->capture();

	engine->gfxMgr->CameraNode->translate(dirVec * dt, Ogre::Node::TS_LOCAL);
	engine->gfxMgr->mCamera->pitch(Ogre::Degree(1 * rotate));
	engine->gfxMgr->mCamera->yaw(Ogre::Degree(1 * yaw));
}

void InputMgr::init(){

	// OIS
	  Ogre::LogManager::getSingletonPtr()->logMessage("*** Initializing OIS ***");

	  OIS::ParamList pl;


		// insert the following lines right before calling mInputSystem = OIS::InputManager::createInputSystem( paramList );
		    #if defined OIS_WIN32_PLATFORM
		    pl.insert(std::make_pair(std::string("w32_mouse"), std::string("DISCL_FOREGROUND" )));
		    pl.insert(std::make_pair(std::string("w32_mouse"), std::string("DISCL_NONEXCLUSIVE")));
		    pl.insert(std::make_pair(std::string("w32_keyboard"), std::string("DISCL_FOREGROUND")));
		    pl.insert(std::make_pair(std::string("w32_keyboard"), std::string("DISCL_NONEXCLUSIVE")));
		    #elif defined OIS_LINUX_PLATFORM
		    pl.insert(std::make_pair(std::string("x11_mouse_grab"), std::string("false")));
		    pl.insert(std::make_pair(std::string("x11_mouse_hide"), std::string("false")));
		    pl.insert(std::make_pair(std::string("x11_keyboard_grab"), std::string("false")));
		    pl.insert(std::make_pair(std::string("XAutoRepeatOn"), std::string("true")));
		    #endif

	  size_t windowHandle = 0;
	  std::ostringstream windowHandleStr;

	  engine->gfxMgr->mWindow->getCustomAttribute("WINDOW", &windowHandle);
	  windowHandleStr << windowHandle;
	  pl.insert(std::make_pair(std::string("WINDOW"), windowHandleStr.str()));

	  mInputMgr = OIS::InputManager::createInputSystem(pl);

	  mKeyboard = static_cast<OIS::Keyboard*>(
	    mInputMgr->createInputObject(OIS::OISKeyboard, true));
	  mMouse = static_cast<OIS::Mouse*>(
	    mInputMgr->createInputObject(OIS::OISMouse, true));

	  windowResized(engine->gfxMgr->mWindow);
	  	  Ogre::WindowEventUtilities::addWindowEventListener(engine->gfxMgr->mWindow, this);

	  	  mKeyboard->setEventCallback(this);
	  	mMouse->setEventCallback(this);

	  engine->gfxMgr->mRoot->addFrameListener(this);






	  Entity381* DDG51 = new Ddg(Ogre::Vector3(0,0,0), 0);
	  	  	Entity381* FRIGATE = new Frigate(Ogre::Vector3(0,0,0), 0);
	  	  	Entity381* CIGARETTE = new Cigarette(Ogre::Vector3(0,0,0), 0);
	  	  	Entity381* ALIEN = new Alien(Ogre::Vector3(0,0,0), 0);
	  	  	Entity381* SPEEDBOAT = new Cvn(Ogre::Vector3(0,0,0), 0);



	  	  	/*Ogre::Entity* ddg51 = engine->gfxMgr->ogreSceneManager->createEntity("ddg51.mesh");
	  	  	Ogre::SceneNode* ddg51Node = engine->gfxMgr->ogreSceneManager->getRootSceneNode()->createChildSceneNode();
	  	  	ddg51Node->setPosition(0,0,0);
	  	  	ddg51Node->attachObject(ddg51);*/

	  	  	Ogre::Entity* frigate = engine->gfxMgr->ogreSceneManager->createEntity("sleek.mesh");
	  	  	Ogre::SceneNode* frigateNode = engine->gfxMgr->ogreSceneManager->getRootSceneNode()->createChildSceneNode();
	  	  	frigateNode->setPosition(200,0,0);
	  	  	frigateNode->attachObject(frigate);

	  	  	Ogre::Entity* cigarette = engine->gfxMgr->ogreSceneManager->createEntity("cigarette.mesh");
	  	  	Ogre::SceneNode* cigaretteNode = engine->gfxMgr->ogreSceneManager->getRootSceneNode()->createChildSceneNode();
	  	  	cigaretteNode->setPosition(400,0,0);
	  	  	cigaretteNode->attachObject(cigarette);

	  	  	Ogre::Entity* alien = engine->gfxMgr->ogreSceneManager->createEntity("alienship.mesh");
	  	  	Ogre::SceneNode* alienNode = engine->gfxMgr->ogreSceneManager->getRootSceneNode()->createChildSceneNode();
	  	  	alienNode->setPosition(600,0,0);
	  	  	alienNode->attachObject(alien);

	  	  	Ogre::Entity* speedboat = engine->gfxMgr->ogreSceneManager->createEntity("cvn68.mesh");
	  	  	Ogre::SceneNode* speedboatNode = engine->gfxMgr->ogreSceneManager->getRootSceneNode()->createChildSceneNode();
	  	  	speedboatNode->setPosition(800,0,0);
	  	  	speedboatNode->attachObject(speedboat);

	  	  	DDG51->ogreEntity = ddg51;
	  	  	FRIGATE->ogreEntity = frigate;
	  	  	CIGARETTE->ogreEntity = cigarette;
	  	  	ALIEN->ogreEntity = alien;
	  	  	SPEEDBOAT->ogreEntity = speedboat;

		  	//engine->entityMgr->entities.push_front(DDG51);
		  	engine->entityMgr->entities.push_front(FRIGATE);
		  	//engine->entityMgr->entities.push_front(CIGARETTE);
		  	//engine->entityMgr->entities.push_front(ALIEN);
		  	//engine->entityMgr->entities.push_front(SPEEDBOAT);

}


void InputMgr::loadLevel(){
}

void InputMgr::stop(){
}

bool InputMgr::keyPressed(const OIS::KeyEvent& ke){
	switch (ke.key)
		{
			case OIS::KC_ESCAPE:
				engine->keepRunning = false;
				break;
			case OIS::KC_TAB:
				selectEntity();
				break;
			case OIS::KC_W:
				dirVec.z -= move;
				break;
			case OIS::KC_S:
				dirVec.z += move;
				break;
			case OIS::KC_R:
				dirVec.y += move;
				break;
			case OIS::KC_F:
				dirVec.y -= move;
				break;
			case OIS::KC_A:
				dirVec.x -= move;
				break;
			case OIS::KC_D:
				dirVec.x += move;
				break;
			case OIS::KC_Q:
				yaw = 0.1f;
				break;
			case OIS::KC_E:
				yaw = -0.1f;
				break;
			case OIS::KC_X:
				rotate = -0.1f;
				break;
			case OIS::KC_Z:
				rotate = 0.1f;
				break;

			default:
				//engine->entityMgr->UpdateVelocity(ke);
				break;
	}
	return true;
}

bool InputMgr::keyReleased(const OIS::KeyEvent& ke){
	switch (ke.key)
		{
			case OIS::KC_W:
				dirVec.z = 0;
				break;
			case OIS::KC_S:
				dirVec.z = 0;
				break;
			case OIS::KC_R:
				dirVec.y = 0;
				break;
			case OIS::KC_F:
				dirVec.y = 0;
				break;
			case OIS::KC_A:
				dirVec.x = 0;
				break;
			case OIS::KC_D:
				dirVec.x = 0;
				break;
			case OIS::KC_Q:
				yaw = 0;
				break;
				case OIS::KC_E:
				yaw = 0;
				break;
			case OIS::KC_X:
				rotate = 0;
				break;
			case OIS::KC_Z:
				rotate = 0;
				break;

			default:
				break;
	}
	return true;
}




bool InputMgr::mouseMoved(const OIS::MouseEvent& me){


	return true;
}

bool InputMgr::mousePressed(const OIS::MouseEvent& me, OIS::MouseButtonID mID){

	return true;
}

bool InputMgr::mouseReleased(const OIS::MouseEvent& me, OIS::MouseButtonID mID){

	return true;
}

void InputMgr::selectEntity(){
	if(selectedEntity == 0)
	{

	}

	else if(selectedEntity == 1)
	{

	}

	else if(selectedEntity == 2)
	{

	}

	else if(selectedEntity == 3)
	{

	}

	else if(selectedEntity == 4)
	{

	}


	selectedEntity++;
	selectedEntity = selectedEntity % 5;


}









